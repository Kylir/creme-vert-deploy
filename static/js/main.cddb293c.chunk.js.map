{"version":3,"sources":["components/SearchInput.jsx","components/Post.jsx","components/ListOfPosts.jsx","components/StatisticTable.jsx","components/TopTenChart.jsx","utils/requests.js","components/MainComponent.jsx","utils/data-analysis.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","react_default","a","createElement","className","type","value","this","props","username","onChange","handleUserOnchange","onClick","handleSelectClick","error","role","message","React","PureComponent","Post","title","body","ListOfPosts","console","log","posts","map","post","idx","Post_Post","StatisticTable","TopTenChart","counts","arrayOfCounts","labels","data","word","push","count","sort","b","slice","forEach","elt","options","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","height","length","style","width","es","maintainAspectRatio","fetchData","url","fetch","then","response","json","catch","err","requests","userId","MainComponent","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleUserNameChange","bind","assertThisInitialized","_this2","setState","errorWhenSelect","users","user","find","name","Error","id","reduce","countMap","com","trim","split","smallWord","toLowerCase","buildWordCountMap","event","target","SearchInput_SearchInput","ListOfPosts_ListOfPosts","StatisticTable_StatisticTable","TopTenChart_TopTenChart","Component","App","MainComponent_MainComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cddb293c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class SearchInput extends React.PureComponent {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"form\">\r\n                    <div className=\"form-group\">\r\n                        <input \r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.props.username}\r\n                            onChange={this.props.handleUserOnchange}\r\n                        />\r\n                    </div>\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={this.props.handleSelectClick}>\r\n                        Select\r\n                    </button>\r\n                    {this.props.error &&\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        {this.props.error.message}\r\n                    </div>\r\n                    }\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class Post extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{this.props.title}</h5>\r\n          <p className=\"card-text\">{this.props.body}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport Post from './Post'\r\n\r\nexport default class ListOfPosts extends React.PureComponent {\r\n  render() {\r\n    console.log('Rendering posts:')\r\n    console.log(this.props.posts)\r\n    return (\r\n      this.props.posts.map((post, idx) => {\r\n        return (\r\n          <Post\r\n            title={post.title}\r\n            body={post.body}\r\n          />\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n}","import React from 'react'\r\n\r\nexport default class StatisticTable extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <p>I'm a component.</p>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport { HorizontalBar } from 'react-chartjs-2'\r\n\r\nexport default class TopTenChart extends React.PureComponent {\r\n\r\n  render() {\r\n    const counts = this.props.counts\r\n    let arrayOfCounts = []\r\n    let labels = []\r\n    let data = []\r\n\r\n    // Extract the labels and counts from the data structure\r\n    for (let word in counts) {\r\n      arrayOfCounts.push({ word: word, count: counts[word] })\r\n    }\r\n\r\n    console.log(arrayOfCounts)\r\n\r\n    // Sort and take only the first 10\r\n    const source = arrayOfCounts.sort((a, b) => { \r\n      if (a.count < b.count) {\r\n        return 1\r\n      } else {\r\n        return -1\r\n      }\r\n    }).slice(0, 10)\r\n\r\n    source.forEach(elt => {\r\n      labels.push(elt.word)\r\n      data.push(elt.count)\r\n    })\r\n\r\n    console.log(labels)\r\n\r\n    const options = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Word count',\r\n          backgroundColor: 'rgba(255,99,132,0.2)',\r\n          borderColor: 'rgba(255,99,132,1)',\r\n          borderWidth: 1,\r\n          hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n          hoverBorderColor: 'rgba(255,99,132,1)',\r\n          data\r\n        }\r\n      ]\r\n    }\r\n\r\n    const height = 30 * labels.length\r\n\r\n    return (\r\n      <div style={{ height: height + 'px', width: '100%' }}>\r\n        <HorizontalBar\r\n          data={options}\r\n          width={null}\r\n          height={15 * height}\r\n          options={{ maintainAspectRatio: false }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}","/**\r\n * Promise to submit a request to a URL passed in parameter\r\n * and get the json.\r\n */\r\nconst fetchData = (url) => {\r\n    return fetch(url).then(function (response) {\r\n        return response.json()\r\n    }).then(function (json) {\r\n        return json\r\n    }).catch((err) => {\r\n        console.error(err)\r\n        return []\r\n    })\r\n}\r\n\r\n/**\r\n * Promise to get a list of random users from https://jsonplaceholder.typicode.com/users\r\n */\r\nconst fetchUsers = () => {\r\n    const url = 'https://jsonplaceholder.typicode.com/users'\r\n    return fetchData(url)\r\n}\r\n\r\n/**\r\n * Promise to get a list of random posts from https://jsonplaceholder.typicode.com/posts for user id X\r\n */\r\nconst fetchPostsForUserId = (userId) => {\r\n    const url = 'https://jsonplaceholder.typicode.com/posts?userId=' + userId\r\n    return fetchData(url)\r\n}\r\n\r\n/**\r\n * Promise to get a list of random comments from https://jsonplaceholder.typicode.com/comments\r\n */\r\nconst fetchComments = () => {\r\n    const url = 'https://jsonplaceholder.typicode.com/comments'\r\n    return fetchData(url)\r\n}\r\n\r\nexport default { fetchUsers, fetchPostsForUserId, fetchComments }","import React from 'react'\r\nimport SearchInput from './SearchInput'\r\nimport ListOfPosts from './ListOfPosts'\r\nimport StatisticTable from './StatisticTable'\r\nimport TopTenChart from './TopTenChart'\r\n\r\nimport requests from '../utils/requests'\r\nimport buildWordCountMap from '../utils/data-analysis'\r\n\r\nexport default class MainComponent extends React.Component {\r\n    \r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            username: '',\r\n            posts: [],\r\n            counts: {}\r\n        }\r\n\r\n        this.handleUserNameChange = this.handleUserNameChange.bind(this);\r\n        this.handleSelectClick = this.handleSelectClick.bind(this);\r\n    }\r\n\r\n    /**\r\n     * When the user clicks on the select button this function does:\r\n     * - Retrieve the list of all users to try to match the entered name\r\n     * - Find all the posts for that particular user\r\n     */\r\n    handleSelectClick () {\r\n\r\n        this.setState({errorWhenSelect: null})\r\n\r\n        requests.fetchUsers().then(users => {\r\n\r\n            // Check if the user name entered exists or not\r\n            const user = users.find(elt => {\r\n                return (elt.name === this.state.username)\r\n            })\r\n            if (!user) {\r\n                throw new Error('No corresponding user. Did you mean Leanne Graham?')\r\n            } else {\r\n                return user\r\n            }\r\n        }).then(user => {\r\n            return requests.fetchPostsForUserId(user.id)\r\n        }).then(posts => {\r\n            const counts = buildWordCountMap(posts)\r\n            this.setState({posts, counts})\r\n        }).catch(err => {\r\n            this.setState({errorWhenSelect: err})\r\n        })\r\n\r\n    }\r\n\r\n    handleUserNameChange (event) {\r\n        this.setState({username: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                \r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <SearchInput \r\n                            username={this.state.username}\r\n                            handleUserOnchange={this.handleUserNameChange}\r\n                            handleSelectClick={this.handleSelectClick}\r\n                            error={this.state.errorWhenSelect}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <ListOfPosts posts={this.state.posts} />\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"row\">\r\n                            <StatisticTable />\r\n                        </div>\r\n                        \r\n                        <div className=\"row\">\r\n                            <TopTenChart counts={this.state.counts} />\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","/**\r\n * Function to browse the posts and build a map of words and their counts\r\n * example of input: [ {body: 'the blue' }, {body: 'blue' }, {body: 'blue' } ]\r\n * example of output: { 'the': 1, 'blue': 3 } \r\n * @param {Array} posts the list of posts from the API \r\n */\r\nexport default function buildWordCountMap (posts) {\r\n    // Browse the posts and extract the text (property named body)\r\n    return posts.reduce((countMap, com) => {\r\n        // Extract the words from the body\r\n        const words = com.body.trim().split(/\\s+/)\r\n        // For each word update the count\r\n        words.forEach(word => {\r\n            const smallWord = word.toLowerCase()\r\n            if (countMap[smallWord]) {\r\n                countMap[smallWord] += 1\r\n            } else {\r\n                countMap[smallWord] = 1\r\n            }\r\n        })\r\n        return countMap\r\n    }, {})\r\n}\r\n","import React from 'react'\nimport './App.css';\nimport MainComponent from './components/MainComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}